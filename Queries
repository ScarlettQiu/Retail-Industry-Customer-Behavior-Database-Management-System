{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Retail Company Database SQL Data Analytics.ipynb",
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "xS_PGZPsr7D3",
        "outputId": "019edaa1-0f5d-400a-9d0c-5d3466972196"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Opened database successfully\n"
          ]
        }
      ],
      "source": [
        "import sqlite3\n",
        "\n",
        "conn = sqlite3.connect('retail.db')\n",
        "print(\"Opened database successfully\");"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "-- ##**<B>Business Query Statement 7:</B> Marketing Team wants to know the customers who registered not through a referral campaign. Generate a list of customers who registered as a member not through a referral campaign, with the customer ID, Full Name, Year of Birth, and Register Date, in the order of registration date. "
      ],
      "metadata": {
        "id": "dcbdK1asuyMW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''SELECT Customer_ID, LastName || \", \"|| FirstName AS FullName, YearBirth, RegisterDate FROM Customer\n",
        "\n",
        "EXCEPT\n",
        "\n",
        "SELECT Referral.Referee_ID, Referral.LastName || \", \"|| Referral.FirstName AS FullName, Referral.YearBirth, Referral.RegisterDate FROM Referral \n",
        "\n",
        "Order BY RegisterDate''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "6aDMvcAtsNu5",
        "outputId": "db5f8a8c-fbc9-4c99-c468-ddd83af32cb1"
      },
      "execution_count": 4,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(3076, 'Wong, Mark', 1975, '2012-07-09')\n",
            "(9360, 'Silk, Martha', 1982, '2012-08-08')\n",
            "(5524, 'Andrew, Adams', 1957, '2012-09-04')\n",
            "(1402, 'Peacock, Mike', 1954, '2012-09-11')\n",
            "(10629, 'Liu, David', 1973, '2012-09-14')\n",
            "(2569, 'Smith, Jack', 1987, '2012-10-12')\n",
            "(2278, 'Brown, Robert', 1985, '2012-11-03')\n",
            "(965, 'King, Robert', 1971, '2012-11-12')\n",
            "(6177, 'Caliahan, Laura', 1985, '2012-11-12')\n",
            "(387, 'Rocha, Alexande', 1976, '2012-11-13')\n",
            "(2114, 'Goyer, Tim', 1946, '2012-11-14')\n",
            "(1993, 'Dubols, Marc', 1949, '2012-12-03')\n",
            "(9736, 'Chase, Kathy', 1980, '2012-12-24')\n",
            "(5376, 'Schneider, Hanna', 1979, '2013-01-06')\n",
            "(7892, 'Rojas, Luis', 1969, '2013-01-06')\n",
            "(10383, 'Rocha, Alexande', 1966, '2013-02-04')\n",
            "(4137, 'Andrew, Adams', 1948, '2013-02-16')\n",
            "(1012, 'Smith, Lucas', 1952, '2013-02-18')\n",
            "(1357, 'Qiu, Jane', 1970, '2013-03-08')\n",
            "(6312, 'Gray, Jane', 1959, '2013-03-17')\n",
            "(1409, 'Murray, Steve', 1951, '2013-03-18')\n",
            "(6565, 'Gray, Patric', 1949, '2013-03-28')\n",
            "(8132, 'Gordon, Yellow', 1975, '2013-04-05')\n",
            "(1050, 'Gordon, Red', 1952, '2013-04-30')\n",
            "(5255, 'Johns, Emma', 1986, '2013-05-21')\n",
            "(8082, 'Stevens, Victor', 1971, '2013-05-21')\n",
            "(9422, 'Stevens, Victor', 1989, '2013-05-21')\n",
            "(2404, 'Talor, Mark', 1976, '2013-05-27')\n",
            "(4855, 'Peeters, Daan', 1974, '2013-06-08')\n",
            "(6518, 'Smith, Adams', 1951, '2013-06-11')\n",
            "(8557, 'Smith, William', 1982, '2013-06-17')\n",
            "(6853, 'Wang, Frank', 1982, '2013-07-04')\n",
            "(4141, 'Peacock, Jane', 1965, '2013-08-11')\n",
            "(4939, 'Gordon, John', 1946, '2013-08-14')\n",
            "(4477, 'Chen, Kathy', 1958, '2013-09-27')\n",
            "(1994, 'Eduardo, Martins', 1983, '2013-11-12')\n",
            "(2125, 'Philips, Mark', 1959, '2013-11-15')\n",
            "(8180, 'Harris, Frank', 1952, '2013-11-15')\n",
            "(4047, 'Smith, Lucas', 1954, '2014-01-04')\n",
            "(7446, 'Mitchell, Michael', 1967, '2014-01-04')\n",
            "(5324, 'Johnson, Steve', 1981, '2014-01-09')\n",
            "(6182, 'Park, Margaret', 1984, '2014-02-01')\n",
            "(8375, 'Chen, Hanna', 1968, '2014-03-03')\n",
            "(2174, 'Edwards, Nancy', 1954, '2014-03-08')\n",
            "(5899, 'Nielsen, Kara', 1950, '2014-03-13')\n",
            "(9369, 'Chase, Kathy', 1979, '2014-03-19')\n",
            "(7437, 'Smith, Jack', 1988, '2014-04-28')\n",
            "(1386, 'Honey, Victor', 1967, '2014-05-11')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "--##**<B>Business Query Statement 8:</B> Sales team wants to know the quantity sold of each product, including those which has no order history.\n",
        "\n",
        "** I have used 3 steps to generate this report.\n",
        "\n",
        "-- Step 1: Generate a list of products which has order history with their quantity sold. \n"
      ],
      "metadata": {
        "id": "btLEbcFav0Do"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''SELECT OrderItem.Product_ID, ProductName, SUM(OrderItem.Quantity) AS QuantitySold, QtyOnHand AS QuantityOnHand FROM OrderItem JOIN Product WHERE OrderItem.Product_ID = Product.Product_ID GROUP BY OrderItem.Product_ID  ''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "WuO-cJ2jut6w",
        "outputId": "94ebe26a-9e83-4fb4-b60f-11066720fbde"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(110, 'WHITE HANGING HEART T-LIGHT HOLDER', 32, 200000)\n",
            "(111, 'WHITE METAL LANTERN', 20, 300000)\n",
            "(112, 'CREAM CUPID HEARTS COAT HANGER', 25, 400000)\n",
            "(113, 'KNITTED UNION FLAG HOT WATER BOTTLE', 4, 500000)\n",
            "(115, 'SET 7 BABUSHKA NESTING BOXES', 8, 700000)\n",
            "(118, 'HAND WARMER RED POLKA DOT', 8, 1000000)\n",
            "(120, \"POPPY'S PLAYHOUSE BEDROOM \", 10, 1200000)\n",
            "(121, \"POPPY'S PLAYHOUSE KITCHEN\", 31, 1300000)\n",
            "(123, 'IVORY KNITTED MUG COSY ', 34, 1500000)\n",
            "(131, 'JAM MAKING SET WITH JARS', 24, 2300000)\n",
            "(132, 'RED COAT RACK PARIS FASHION', 4, 2400000)\n",
            "(133, 'YELLOW COAT RACK PARIS FASHION', 6, 2500000)\n",
            "(134, 'BLUE COAT RACK PARIS FASHION', 28, 2600000)\n",
            "(135, 'BATH BUILDING BLOCK WORD', 10, 2700000)\n",
            "(136, 'ALARM CLOCK BAKELIKE PINK', 12, 2800000)\n",
            "(137, 'ALARM CLOCK BAKELIKE RED ', 12, 2800000)\n",
            "(138, 'ALARM CLOCK BAKELIKE GREEN', 10, 2800000)\n",
            "(143, 'SET/2 RED RETROSPOT TEA TOWELS ', 16, 2000000)\n",
            "(144, 'ROUND SNACK BOXES SET OF4 WOODLAND ', 18, 2000000)\n",
            "(145, 'SPACEBOY LUNCH BOX ', 38, 2000000)\n",
            "(146, 'LUNCH BOX I LOVE LONDON', 2, 2000000)\n",
            "(155, 'POSTAGE', 4, 2000000)\n",
            "(163, 'RETRO COFFEE MUGS ASSORTED', 16, 1100000)\n",
            "(166, 'VINTAGE BILLBOARD LOVE/HATE MUG', 16, 1100000)\n",
            "(169, 'WOODEN PICTURE FRAME WHITE FINISH', 2, 1100000)\n",
            "(170, 'WOODEN FRAME ANTIQUE WHITE ', 2, 1100000)\n",
            "(171, 'KNITTED UNION FLAG HOT WATER BOTTLE', 2, 1100000)\n",
            "(172, 'RED WOOLLY HOTTIE WHITE HEART', 70, 1100000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "-- Step 1: Generate a list of products which has order history with their quantity sold. \n"
      ],
      "metadata": {
        "id": "MKsmYkWGv_De"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''SELECT Product_ID, ProductName, 0 AS QuantitySold, QtyOnHand AS QuantityOnHand FROM Product  WHERE Product_ID NOT IN (SELECT Product_ID FROM (SELECT OrderItem.Product_ID, ProductName, SUM(OrderItem.Quantity) AS QuantitySold, QtyOnHand AS QuantityOnHand FROM OrderItem JOIN Product WHERE OrderItem.Product_ID = Product.Product_ID GROUP BY OrderItem.Product_ID))''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "IwNjuhYFwofY",
        "outputId": "8e3133e5-7a29-4a2b-f793-b859d2a0e66a"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(114, 'RED WOOLLY HOTTIE WHITE HEART.', 0, 600000)\n",
            "(116, 'GLASS STAR FROSTED T-LIGHT HOLDER', 0, 800000)\n",
            "(117, 'HAND WARMER UNION JACK', 0, 900000)\n",
            "(119, 'ASSORTED COLOUR BIRD ORNAMENT', 0, 1100000)\n",
            "(122, 'FELTCRAFT PRINCESS CHARLOTTE DOLL', 0, 1400000)\n",
            "(124, 'BOX OF 6 ASSORTED COLOUR TEASPOONS', 0, 1600000)\n",
            "(125, 'BOX OF VINTAGE JIGSAW BLOCKS ', 0, 1700000)\n",
            "(126, 'BOX OF VINTAGE ALPHABET BLOCKS', 0, 1800000)\n",
            "(127, 'HOME BUILDING BLOCK WORD', 0, 1900000)\n",
            "(128, 'LOVE BUILDING BLOCK WORD', 0, 2000000)\n",
            "(129, 'RECIPE BOX WITH METAL HEART', 0, 2100000)\n",
            "(130, 'DOORMAT NEW ENGLAND', 0, 2200000)\n",
            "(139, 'PANDA AND BUNNIES STICKER SHEET', 0, 2000000)\n",
            "(140, 'STARS GIFT TAPE ', 0, 2000000)\n",
            "(141, 'INFLATABLE POLITICAL GLOBE ', 0, 2000000)\n",
            "(142, 'VINTAGE HEADS AND TAILS CARD GAME ', 0, 2000000)\n",
            "(147, 'CIRCUS PARADE LUNCH BOX ', 0, 2000000)\n",
            "(148, 'CHARLOTTE BAG DOLLY GIRL DESIGN', 0, 2000000)\n",
            "(149, 'RED TOADSTOOL LED NIGHT LIGHT', 0, 2000000)\n",
            "(150, ' SET 2 TEA TOWELS I LOVE LONDON ', 0, 2000000)\n",
            "(151, 'VINTAGE SEASIDE JIGSAW PUZZLES', 0, 2000000)\n",
            "(152, 'MINI JIGSAW CIRCUS PARADE ', 0, 2000000)\n",
            "(153, 'MINI JIGSAW SPACEBOY', 0, 2000000)\n",
            "(154, 'MINI PAINT SET VINTAGE ', 0, 2000000)\n",
            "(156, \"PAPER CHAIN KIT 50'S CHRISTMAS \", 0, 2000000)\n",
            "(157, 'HAND WARMER RED POLKA DOT', 0, 2000000)\n",
            "(158, 'HAND WARMER UNION JACK', 0, 2000000)\n",
            "(159, 'WHITE HANGING HEART T-LIGHT HOLDER', 0, 2000000)\n",
            "(160, 'WHITE METAL LANTERN', 0, 1100000)\n",
            "(161, 'CREAM CUPID HEARTS COAT HANGER', 0, 1100000)\n",
            "(162, 'EDWARDIAN PARASOL RED', 0, 1100000)\n",
            "(164, 'SAVE THE PLANET MUG', 0, 1100000)\n",
            "(165, 'VINTAGE BILLBOARD DRINK ME MUG', 0, 1100000)\n",
            "(167, 'WOOD 2 DRAWER CABINET WHITE FINISH', 0, 1100000)\n",
            "(168, 'WOOD S/3 CABINET ANT WHITE FINISH', 0, 1100000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "-- Step 3: Combine the above 2 lists by using UNION Operator.\n"
      ],
      "metadata": {
        "id": "zq45BSeZwukt"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''SELECT DISTINCT OrderItem.Product_ID, ProductName, COUNT(OrderItem.Product_ID) AS QuantitySold, QtyOnHand AS QuantityOnHand FROM OrderItem JOIN Product WHERE OrderItem.Product_ID = Product.Product_ID GROUP BY OrderItem.Product_ID  \n",
        "\n",
        "UNION\n",
        "\n",
        "SELECT Product_ID, ProductName, 0 AS QuantitySold, QtyOnHand AS QuantityOnHand FROM Product  WHERE Product_ID NOT IN (SELECT Product_ID FROM (SELECT OrderItem.Product_ID, ProductName, SUM(OrderItem.Quantity) AS QuantitySold, QtyOnHand AS QuantityOnHand FROM OrderItem JOIN Product WHERE OrderItem.Product_ID = Product.Product_ID GROUP BY OrderItem.Product_ID))\n",
        "\n",
        "ORDER BY QuantitySold DESC''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iNoXs6Vcwwyr",
        "outputId": "1c6c5b86-b48f-4e17-bdfd-5f2c31a7ae23"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(121, \"POPPY'S PLAYHOUSE KITCHEN\", 19, 1300000)\n",
            "(172, 'RED WOOLLY HOTTIE WHITE HEART', 16, 1100000)\n",
            "(110, 'WHITE HANGING HEART T-LIGHT HOLDER', 12, 200000)\n",
            "(123, 'IVORY KNITTED MUG COSY ', 8, 1500000)\n",
            "(131, 'JAM MAKING SET WITH JARS', 6, 2300000)\n",
            "(134, 'BLUE COAT RACK PARIS FASHION', 6, 2600000)\n",
            "(145, 'SPACEBOY LUNCH BOX ', 6, 2000000)\n",
            "(111, 'WHITE METAL LANTERN', 4, 300000)\n",
            "(144, 'ROUND SNACK BOXES SET OF4 WOODLAND ', 4, 2000000)\n",
            "(155, 'POSTAGE', 4, 2000000)\n",
            "(113, 'KNITTED UNION FLAG HOT WATER BOTTLE', 2, 500000)\n",
            "(115, 'SET 7 BABUSHKA NESTING BOXES', 2, 700000)\n",
            "(118, 'HAND WARMER RED POLKA DOT', 2, 1000000)\n",
            "(120, \"POPPY'S PLAYHOUSE BEDROOM \", 2, 1200000)\n",
            "(132, 'RED COAT RACK PARIS FASHION', 2, 2400000)\n",
            "(133, 'YELLOW COAT RACK PARIS FASHION', 2, 2500000)\n",
            "(135, 'BATH BUILDING BLOCK WORD', 2, 2700000)\n",
            "(136, 'ALARM CLOCK BAKELIKE PINK', 2, 2800000)\n",
            "(137, 'ALARM CLOCK BAKELIKE RED ', 2, 2800000)\n",
            "(138, 'ALARM CLOCK BAKELIKE GREEN', 2, 2800000)\n",
            "(143, 'SET/2 RED RETROSPOT TEA TOWELS ', 2, 2000000)\n",
            "(146, 'LUNCH BOX I LOVE LONDON', 2, 2000000)\n",
            "(163, 'RETRO COFFEE MUGS ASSORTED', 2, 1100000)\n",
            "(166, 'VINTAGE BILLBOARD LOVE/HATE MUG', 2, 1100000)\n",
            "(169, 'WOODEN PICTURE FRAME WHITE FINISH', 2, 1100000)\n",
            "(170, 'WOODEN FRAME ANTIQUE WHITE ', 2, 1100000)\n",
            "(171, 'KNITTED UNION FLAG HOT WATER BOTTLE', 2, 1100000)\n",
            "(112, 'CREAM CUPID HEARTS COAT HANGER', 1, 400000)\n",
            "(114, 'RED WOOLLY HOTTIE WHITE HEART.', 0, 600000)\n",
            "(116, 'GLASS STAR FROSTED T-LIGHT HOLDER', 0, 800000)\n",
            "(117, 'HAND WARMER UNION JACK', 0, 900000)\n",
            "(119, 'ASSORTED COLOUR BIRD ORNAMENT', 0, 1100000)\n",
            "(122, 'FELTCRAFT PRINCESS CHARLOTTE DOLL', 0, 1400000)\n",
            "(124, 'BOX OF 6 ASSORTED COLOUR TEASPOONS', 0, 1600000)\n",
            "(125, 'BOX OF VINTAGE JIGSAW BLOCKS ', 0, 1700000)\n",
            "(126, 'BOX OF VINTAGE ALPHABET BLOCKS', 0, 1800000)\n",
            "(127, 'HOME BUILDING BLOCK WORD', 0, 1900000)\n",
            "(128, 'LOVE BUILDING BLOCK WORD', 0, 2000000)\n",
            "(129, 'RECIPE BOX WITH METAL HEART', 0, 2100000)\n",
            "(130, 'DOORMAT NEW ENGLAND', 0, 2200000)\n",
            "(139, 'PANDA AND BUNNIES STICKER SHEET', 0, 2000000)\n",
            "(140, 'STARS GIFT TAPE ', 0, 2000000)\n",
            "(141, 'INFLATABLE POLITICAL GLOBE ', 0, 2000000)\n",
            "(142, 'VINTAGE HEADS AND TAILS CARD GAME ', 0, 2000000)\n",
            "(147, 'CIRCUS PARADE LUNCH BOX ', 0, 2000000)\n",
            "(148, 'CHARLOTTE BAG DOLLY GIRL DESIGN', 0, 2000000)\n",
            "(149, 'RED TOADSTOOL LED NIGHT LIGHT', 0, 2000000)\n",
            "(150, ' SET 2 TEA TOWELS I LOVE LONDON ', 0, 2000000)\n",
            "(151, 'VINTAGE SEASIDE JIGSAW PUZZLES', 0, 2000000)\n",
            "(152, 'MINI JIGSAW CIRCUS PARADE ', 0, 2000000)\n",
            "(153, 'MINI JIGSAW SPACEBOY', 0, 2000000)\n",
            "(154, 'MINI PAINT SET VINTAGE ', 0, 2000000)\n",
            "(156, \"PAPER CHAIN KIT 50'S CHRISTMAS \", 0, 2000000)\n",
            "(157, 'HAND WARMER RED POLKA DOT', 0, 2000000)\n",
            "(158, 'HAND WARMER UNION JACK', 0, 2000000)\n",
            "(159, 'WHITE HANGING HEART T-LIGHT HOLDER', 0, 2000000)\n",
            "(160, 'WHITE METAL LANTERN', 0, 1100000)\n",
            "(161, 'CREAM CUPID HEARTS COAT HANGER', 0, 1100000)\n",
            "(162, 'EDWARDIAN PARASOL RED', 0, 1100000)\n",
            "(164, 'SAVE THE PLANET MUG', 0, 1100000)\n",
            "(165, 'VINTAGE BILLBOARD DRINK ME MUG', 0, 1100000)\n",
            "(167, 'WOOD 2 DRAWER CABINET WHITE FINISH', 0, 1100000)\n",
            "(168, 'WOOD S/3 CABINET ANT WHITE FINISH', 0, 1100000)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "--##**<B>Business Query Statement 9:</B> Product Team wants to tag customers according to the number of complaints. Tag those who complained over 1 time as “Risky”, those who have 1 complaint as “Attention”, those who have not complained yet as “Normal”."
      ],
      "metadata": {
        "id": "-OL3tb5Zw5Jo"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''SELECT Customer_ID, LastName || \", \"|| FirstName AS FullName, RegisterDate, NumOfComplain, \n",
        "CASE\n",
        "WHEN NumOfComplain >1 THEN \" Risky\"\n",
        "WHEN NumOfComplain =1 THEN \"Attention\"\n",
        "ELSE \"Normal\"\n",
        "END AS Tag\n",
        "FROM Customer\n",
        "ORDER BY NumOfComplain DESC''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "QH2MKihAw6ey",
        "outputId": "d33509d0-9579-4de6-bdb8-318b365aebdf"
      },
      "execution_count": 8,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(8375, 'Chen, Hanna', '2014-03-03', 2, ' Risky')\n",
            "(1050, 'Gordon, Red', '2013-04-30', 2, ' Risky')\n",
            "(5524, 'Andrew, Adams', '2012-09-04', 1, 'Attention')\n",
            "(6182, 'Park, Margaret', '2014-02-01', 1, 'Attention')\n",
            "(965, 'King, Robert', '2012-11-12', 1, 'Attention')\n",
            "(1993, 'Dubols, Marc', '2012-12-03', 1, 'Attention')\n",
            "(10383, 'Rocha, Alexande', '2013-02-04', 1, 'Attention')\n",
            "(7437, 'Smith, Jack', '2014-04-28', 1, 'Attention')\n",
            "(8557, 'Smith, William', '2013-06-17', 1, 'Attention')\n",
            "(8614, 'Murray, John', '2013-08-14', 1, 'Attention')\n",
            "(2174, 'Edwards, Nancy', '2014-03-08', 0, 'Normal')\n",
            "(4141, 'Peacock, Jane', '2013-08-11', 0, 'Normal')\n",
            "(5324, 'Johnson, Steve', '2014-01-09', 0, 'Normal')\n",
            "(7446, 'Mitchell, Michael', '2014-01-04', 0, 'Normal')\n",
            "(6177, 'Caliahan, Laura', '2012-11-12', 0, 'Normal')\n",
            "(4855, 'Peeters, Daan', '2013-06-08', 0, 'Normal')\n",
            "(5899, 'Nielsen, Kara', '2014-03-13', 0, 'Normal')\n",
            "(1994, 'Eduardo, Martins', '2013-11-12', 0, 'Normal')\n",
            "(387, 'Rocha, Alexande', '2012-11-13', 0, 'Normal')\n",
            "(2125, 'Philips, Mark', '2013-11-15', 0, 'Normal')\n",
            "(8180, 'Harris, Frank', '2013-11-15', 0, 'Normal')\n",
            "(2569, 'Smith, Jack', '2012-10-12', 0, 'Normal')\n",
            "(2114, 'Goyer, Tim', '2012-11-14', 0, 'Normal')\n",
            "(9736, 'Chase, Kathy', '2012-12-24', 0, 'Normal')\n",
            "(4939, 'Gordon, John', '2013-08-14', 0, 'Normal')\n",
            "(6565, 'Gray, Patric', '2013-03-28', 0, 'Normal')\n",
            "(2278, 'Brown, Robert', '2012-11-03', 0, 'Normal')\n",
            "(9360, 'Silk, Martha', '2012-08-08', 0, 'Normal')\n",
            "(5376, 'Schneider, Hanna', '2013-01-06', 0, 'Normal')\n",
            "(4047, 'Smith, Lucas', '2014-01-04', 0, 'Normal')\n",
            "(1409, 'Murray, Steve', '2013-03-18', 0, 'Normal')\n",
            "(7892, 'Rojas, Luis', '2013-01-06', 0, 'Normal')\n",
            "(2404, 'Talor, Mark', '2013-05-27', 0, 'Normal')\n",
            "(5255, 'Johns, Emma', '2013-05-21', 0, 'Normal')\n",
            "(9422, 'Stevens, Victor', '2013-05-21', 0, 'Normal')\n",
            "(6853, 'Wang, Frank', '2013-07-04', 0, 'Normal')\n",
            "(3076, 'Wong, Mark', '2012-07-09', 0, 'Normal')\n",
            "(1012, 'Smith, Lucas', '2013-02-18', 0, 'Normal')\n",
            "(6518, 'Smith, Adams', '2013-06-11', 0, 'Normal')\n",
            "(4137, 'Andrew, Adams', '2013-02-16', 0, 'Normal')\n",
            "(8082, 'Stevens, Victor', '2013-05-21', 0, 'Normal')\n",
            "(1386, 'Honey, Victor', '2014-05-11', 0, 'Normal')\n",
            "(9369, 'Chase, Kathy', '2014-03-19', 0, 'Normal')\n",
            "(4477, 'Chen, Kathy', '2013-09-27', 0, 'Normal')\n",
            "(1357, 'Qiu, Jane', '2013-03-08', 0, 'Normal')\n",
            "(1402, 'Peacock, Mike', '2012-09-11', 0, 'Normal')\n",
            "(10629, 'Liu, David', '2012-09-14', 0, 'Normal')\n",
            "(6312, 'Gray, Jane', '2013-03-17', 0, 'Normal')\n",
            "(8132, 'Gordon, Yellow', '2013-04-05', 0, 'Normal')\n",
            "(1966, 'Murray, Steve', '2014-02-01', 0, 'Normal')\n",
            "(6864, 'Smith, Steve', '2014-02-01', 0, 'Normal')\n",
            "(3033, 'Smith, Jack', '2014-02-01', 0, 'Normal')\n",
            "(5710, 'Wilson, Mike', '2014-02-01', 0, 'Normal')\n",
            "(7373, 'Jones, Red', '2014-02-01', 0, 'Normal')\n",
            "(8755, 'Murray, Micky', '2014-02-01', 0, 'Normal')\n",
            "(10738, 'Cook, Jane', '2014-02-01', 0, 'Normal')\n",
            "(4339, ' Ford, Katie', '2013-01-02', 0, 'Normal')\n",
            "(10755, 'Murray, Michelle', '2013-01-02', 0, 'Normal')\n",
            "(8595, 'Jones, Steve', '2013-01-02', 0, 'Normal')\n",
            "(2968, 'Murray, Michael', '2013-01-02', 0, 'Normal')\n",
            "(8601, 'Brown, Rachel', '2013-01-02', 0, 'Normal')\n",
            "(503, 'Jones, Monica', '2013-08-14', 0, 'Normal')\n",
            "(8430, 'Cook, Joe', '2013-08-14', 0, 'Normal')\n",
            "(7281, 'Armstrong, Laura', '2013-08-14', 0, 'Normal')\n",
            "(2139, 'Williams, Wendy', '2013-08-14', 0, 'Normal')\n",
            "(1371, 'Murray, Emily', '2013-08-14', 0, 'Normal')\n",
            "(9909, 'Armstrong, Orange', '2013-08-14', 0, 'Normal')\n",
            "(7286, 'Murray, Stephanie', '2013-08-14', 0, 'Normal')\n",
            "(7244, 'Wilson, Jackie', '2013-08-14', 0, 'Normal')\n",
            "(6566, 'Wilson, Jade', '2013-08-14', 0, 'Normal')\n",
            "(4114, 'Williams, Joe', '2013-08-14', 0, 'Normal')\n",
            "(1331, 'Collins, John', '2013-08-14', 0, 'Normal')\n",
            "(2225, ' Ford, Joy', '2013-08-14', 0, 'Normal')\n",
            "(9381, 'Murray, Tim', '2013-08-14', 0, 'Normal')\n",
            "(6260, 'Collins, Ray', '2013-08-14', 0, 'Normal')\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "--##**<B>Business Query Statements 10:</B> Sales and leadership team wants to see the quarter sales performances.\n"
      ],
      "metadata": {
        "id": "Ab87pK8pxDTH"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''SELECT \n",
        "strftime(\"%Y\", OrderDate) AS Year, \n",
        "CASE \n",
        "WHEN strftime(\"%m\", OrderDate) IN (\"01\", \"02\", \"03\") THEN \"Q1\"\n",
        "WHEN strftime(\"%m\", OrderDate) IN (\"04\", \"05\", \"06\") THEN \"Q2\"\n",
        "WHEN strftime(\"%m\", OrderDate) IN (\"07\", \"08\", \"09\") THEN \"Q3\"\n",
        "ELSE \"Q4\"\n",
        "END AS Quarter,\n",
        "SUM(TotalFee) AS QuarterlySales\n",
        "FROM OrderList GROUP BY Year, Quarter ORDER BY Quarter, Year''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "KyHngpv7xEdI",
        "outputId": "493f0eeb-e8ac-4b0f-c7d7-0d8745683a01"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "('2012', 'Q1', 14.35)\n",
            "('2013', 'Q1', 1800.865)\n",
            "('2014', 'Q1', 383.465)\n",
            "('2012', 'Q2', 21.105)\n",
            "('2013', 'Q2', 492.5710000000001)\n",
            "('2014', 'Q2', 88.56)\n",
            "('2012', 'Q3', 271.3)\n",
            "('2013', 'Q3', 1815.645)\n",
            "('2014', 'Q3', 204.4)\n",
            "('2012', 'Q4', 4581.259999999999)\n",
            "('2013', 'Q4', 1594.436)\n",
            "('2014', 'Q4', 91.7)\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "--##**<B>Business Query Statements 11:</B> Create a view of the labeled customers by the risk level which could be used to further check their behaviors in sales and campaigns."
      ],
      "metadata": {
        "id": "xR_bcWQmxJRA"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''CREATE VIEW IF NOT EXISTS CustGroup\n",
        "AS \n",
        "\n",
        "SELECT Customer_ID, LastName || \", \"|| FirstName AS FullName, YearBirth, Education, MaritalStatus, RegisterDate, NumOfComplain, CusChanAccountID,\n",
        "CASE\n",
        "WHEN NumOfComplain >1 THEN \" Risky\"\n",
        "WHEN NumOfComplain =1 THEN \"Attention\"\n",
        "ELSE \"Normal\"\n",
        "END AS Tag\n",
        "FROM Customer \n",
        "GROUP BY Customer_ID\n",
        "ORDER BY NumOfComplain DESC''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "id": "fXpiM3qaxO86"
      },
      "execution_count": 16,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [
        "cursor = conn.execute('''SELECT * FROM CustGroup''')\n",
        "for row in cursor:\n",
        "  print(row)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "RQStZYgWyAFp",
        "outputId": "7d8d430a-063f-47b8-93a6-1b499c6748f0"
      },
      "execution_count": 17,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "(1050, 'Gordon, Red', 1952, 'Graduation', 'Married', '2013-04-30', 2, 'a100000145', ' Risky')\n",
            "(8375, 'Chen, Hanna', 1968, 'PhD', 'Married', '2014-03-03', 2, 'a100000130', ' Risky')\n",
            "(965, 'King, Robert', 1971, 'Bachelor', 'Divorced', '2012-11-12', 1, 'a100000035', 'Attention')\n",
            "(1993, 'Dubols, Marc', 1949, 'PhD', 'Married', '2012-12-03', 1, 'a100000051', 'Attention')\n",
            "(5524, 'Andrew, Adams', 1957, 'Bachelor', 'Single', '2012-09-04', 1, 'a100000029', 'Attention')\n",
            "(6182, 'Park, Margaret', 1984, 'Bachelor', 'Together', '2014-02-01', 1, 'a100000032', 'Attention')\n",
            "(7437, 'Smith, Jack', 1988, 'Graduation', 'Single', '2014-04-28', 1, 'a100000128', 'Attention')\n",
            "(8557, 'Smith, William', 1982, 'Graduation', 'Single', '2013-06-17', 1, 'a100000129', 'Attention')\n",
            "(8614, 'Murray, John', 1957, 'Bachelor', 'Widow', '2013-08-14', 1, 'a100000121', 'Attention')\n",
            "(10383, 'Rocha, Alexande', 1966, 'Graduation', 'Divorced', '2013-02-04', 1, 'a100000127', 'Attention')\n",
            "(387, 'Rocha, Alexande', 1976, 'Basic', 'Married', '2012-11-13', 0, 'a100000040', 'Normal')\n",
            "(503, 'Jones, Monica', 1985, 'Master', 'Married', '2013-08-14', 0, 'a100000112', 'Normal')\n",
            "(1012, 'Smith, Lucas', 1952, 'Graduation', 'Single', '2013-02-18', 0, 'a100000133', 'Normal')\n",
            "(1331, 'Collins, John', 1977, 'Bachelor', 'Single', '2013-08-14', 0, 'a100000123', 'Normal')\n",
            "(1357, 'Qiu, Jane', 1970, 'Graduation', 'Together', '2013-03-08', 0, 'a100000140', 'Normal')\n",
            "(1371, 'Murray, Emily', 1976, 'Bachelor', 'Single', '2013-08-14', 0, 'a100000116', 'Normal')\n",
            "(1386, 'Honey, Victor', 1967, 'Graduation', 'Together', '2014-05-11', 0, 'a100000137', 'Normal')\n",
            "(1402, 'Peacock, Mike', 1954, 'Master', 'Married', '2012-09-11', 0, 'a100000141', 'Normal')\n",
            "(1409, 'Murray, Steve', 1951, 'Bachelor', 'Together', '2013-03-18', 0, 'a100000053', 'Normal')\n",
            "(1966, 'Murray, Steve', 1965, 'PhD', 'Married', '2014-02-01', 0, 'a100000100', 'Normal')\n",
            "(1994, 'Eduardo, Martins', 1983, 'Bachelor', 'Married', '2013-11-12', 0, 'a100000039', 'Normal')\n",
            "(2114, 'Goyer, Tim', 1946, 'PhD', 'Single', '2012-11-14', 0, 'a100000044', 'Normal')\n",
            "(2125, 'Philips, Mark', 1959, 'Bachelor', 'Divorced', '2013-11-15', 0, 'a100000041', 'Normal')\n",
            "(2139, 'Williams, Wendy', 1975, 'Master', 'Married', '2013-08-14', 0, 'a100000115', 'Normal')\n",
            "(2174, 'Edwards, Nancy', 1954, 'Bachelor', 'Single', '2014-03-08', 0, 'a100000030', 'Normal')\n",
            "(2225, ' Ford, Joy', 1977, 'Bachelor', 'Divorced', '2013-08-14', 0, 'a100000124', 'Normal')\n",
            "(2278, 'Brown, Robert', 1985, 'High School', 'Single', '2012-11-03', 0, 'a100000048', 'Normal')\n",
            "(2404, 'Talor, Mark', 1976, 'Bachelor', 'Married', '2013-05-27', 0, 'a100000055', 'Normal')\n",
            "(2569, 'Smith, Jack', 1987, 'Bachelor', 'Married', '2012-10-12', 0, 'a100000043', 'Normal')\n",
            "(2968, 'Murray, Michael', 1943, 'PhD', 'Divorced', '2013-01-02', 0, 'a100000110', 'Normal')\n",
            "(3033, 'Smith, Jack', 1963, 'Master', 'Together', '2014-02-01', 0, 'a100000102', 'Normal')\n",
            "(3076, 'Wong, Mark', 1975, 'Graduation', 'Together', '2012-07-09', 0, 'a100000132', 'Normal')\n",
            "(4047, 'Smith, Lucas', 1954, 'PhD', 'Married', '2014-01-04', 0, 'a100000052', 'Normal')\n",
            "(4114, 'Williams, Joe', 1964, 'Master', 'Married', '2013-08-14', 0, 'a100000122', 'Normal')\n",
            "(4137, 'Andrew, Adams', 1948, 'Graduation', 'Together', '2013-02-16', 0, 'a100000135', 'Normal')\n",
            "(4141, 'Peacock, Jane', 1965, 'Bachelor', 'Together', '2013-08-11', 0, 'a100000031', 'Normal')\n",
            "(4339, ' Ford, Katie', 1970, 'PhD', 'Married', '2013-01-02', 0, 'a100000107', 'Normal')\n",
            "(4477, 'Chen, Kathy', 1958, 'Graduation', 'Together', '2013-09-27', 0, 'a100000139', 'Normal')\n",
            "(4855, 'Peeters, Daan', 1974, 'PhD', 'Together', '2013-06-08', 0, 'a100000037', 'Normal')\n",
            "(4939, 'Gordon, John', 1946, 'Bachelor', 'Together', '2013-08-14', 0, 'a100000046', 'Normal')\n",
            "(5255, 'Johns, Emma', 1986, 'Bachelor', 'Single', '2013-05-21', 0, 'a100000056', 'Normal')\n",
            "(5324, 'Johnson, Steve', 1981, 'PhD', 'Married', '2014-01-09', 0, 'a100000033', 'Normal')\n",
            "(5376, 'Schneider, Hanna', 1979, 'Bachelor', 'Married', '2013-01-06', 0, 'a100000050', 'Normal')\n",
            "(5710, 'Wilson, Mike', 1970, 'Bachelor', 'Together', '2014-02-01', 0, 'a100000103', 'Normal')\n",
            "(5899, 'Nielsen, Kara', 1950, 'PhD', 'Together', '2014-03-13', 0, 'a100000038', 'Normal')\n",
            "(6177, 'Caliahan, Laura', 1985, 'PhD', 'Married', '2012-11-12', 0, 'a100000036', 'Normal')\n",
            "(6260, 'Collins, Ray', 1955, 'Master', 'Together', '2013-08-14', 0, 'a100000126', 'Normal')\n",
            "(6312, 'Gray, Jane', 1959, 'Graduation', 'Married', '2013-03-17', 0, 'a100000143', 'Normal')\n",
            "(6518, 'Smith, Adams', 1951, 'PhD', 'Widow', '2013-06-11', 0, 'a100000134', 'Normal')\n",
            "(6565, 'Gray, Patric', 1949, 'Master', 'Married', '2013-03-28', 0, 'a100000047', 'Normal')\n",
            "(6566, 'Wilson, Jade', 1954, 'PhD', 'Married', '2013-08-14', 0, 'a100000120', 'Normal')\n",
            "(6853, 'Wang, Frank', 1982, 'Master', 'Single', '2013-07-04', 0, 'a100000131', 'Normal')\n",
            "(6864, 'Smith, Steve', 1989, 'Master', 'Divorced', '2014-02-01', 0, 'a100000101', 'Normal')\n",
            "(7244, 'Wilson, Jackie', 1951, 'Bachelor', 'Single', '2013-08-14', 0, 'a100000119', 'Normal')\n",
            "(7281, 'Armstrong, Laura', 1959, 'PhD', 'Single', '2013-08-14', 0, 'a100000114', 'Normal')\n",
            "(7286, 'Murray, Stephanie', 1968, 'Bachelor', 'Together', '2013-08-14', 0, 'a100000118', 'Normal')\n",
            "(7373, 'Jones, Red', 1952, 'PhD', 'Divorced', '2014-02-01', 0, 'a100000104', 'Normal')\n",
            "(7446, 'Mitchell, Michael', 1967, 'Master', 'Together', '2014-01-04', 0, 'a100000034', 'Normal')\n",
            "(7892, 'Rojas, Luis', 1969, 'Bachelor', 'Single', '2013-01-06', 0, 'a100000054', 'Normal')\n",
            "(8082, 'Stevens, Victor', 1971, 'Graduation', 'Married', '2013-05-21', 0, 'a100000136', 'Normal')\n",
            "(8132, 'Gordon, Yellow', 1975, 'PhD', 'Married', '2013-04-05', 0, 'a100000144', 'Normal')\n",
            "(8180, 'Harris, Frank', 1952, 'Master', 'Divorced', '2013-11-15', 0, 'a100000042', 'Normal')\n",
            "(8430, 'Cook, Joe', 1957, 'Bachelor', 'Together', '2013-08-14', 0, 'a100000113', 'Normal')\n",
            "(8595, 'Jones, Steve', 1973, 'Bachelor', 'Widow', '2013-01-02', 0, 'a100000109', 'Normal')\n",
            "(8601, 'Brown, Rachel', 1980, 'Bachelor', 'Married', '2013-01-02', 0, 'a100000111', 'Normal')\n",
            "(8755, 'Murray, Micky', 1946, 'Master', 'Married', '2014-02-01', 0, 'a100000105', 'Normal')\n",
            "(9360, 'Silk, Martha', 1982, 'Bachelor', 'Married', '2012-08-08', 0, 'a100000049', 'Normal')\n",
            "(9369, 'Chase, Kathy', 1979, '2n Cycle', 'Single', '2014-03-19', 0, 'a100000138', 'Normal')\n",
            "(9381, 'Murray, Tim', 1978, 'Bachelor', 'Married', '2013-08-14', 0, 'a100000125', 'Normal')\n",
            "(9422, 'Stevens, Victor', 1989, 'Bachelor', 'Married', '2013-05-21', 0, 'a100000057', 'Normal')\n",
            "(9736, 'Chase, Kathy', 1980, 'Bachelor', 'Married', '2012-12-24', 0, 'a100000045', 'Normal')\n",
            "(9909, 'Armstrong, Orange', 1996, 'High School', 'Married', '2013-08-14', 0, 'a100000117', 'Normal')\n",
            "(10629, 'Liu, David', 1973, '2n Cycle', 'Married', '2012-09-14', 0, 'a100000142', 'Normal')\n",
            "(10738, 'Cook, Jane', 1951, 'Master', 'Single', '2014-02-01', 0, 'a100000106', 'Normal')\n",
            "(10755, 'Murray, Michelle', 1976, '2n Cycle', 'Married', '2013-01-02', 0, 'a100000108', 'Normal')\n"
          ]
        }
      ]
    }
  ]
}
